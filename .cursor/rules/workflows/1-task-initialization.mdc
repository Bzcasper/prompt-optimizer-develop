---
description: Workflow when task initialization
alwaysApply: false
---
# Workflow 1: Task Initialization

Set up new tasks, analyze requirements, formulate development plans.

## üéØ Process Goals

- Clearly understand task requirements and objectives
- Initialize workspace working environment
- Formulate specific development plans
- Establish task tracking mechanisms

## üìã Prerequisites

### Input Requirements
- Clear task description or requirements from user
- Basic technical background information

### Environment Check
- workspace should be empty or template state
- If workspace has content, execute [Workflow 3: Task Archiving](./3-task-archiving.md) first

## üîÑ Execution Steps

### 1. Requirements Confirmation and Analysis ‚ö†Ô∏è Must Feedback
**Operation Content**:
- Carefully read user requirements
- Analyze technical feasibility
- Identify potential risks and dependencies

**‚ö†Ô∏è Feedback Requirements**:
```typescript
await mcp_feedback_enhanced({
  summary: "The task requirements I understand are: [requirements summary]. Plan to adopt [technical solution], estimated [time estimate]. Please confirm if understanding is correct?",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Clearly explain understood task objectives and scope
- Mention identified main technical challenges
- Provide preliminary time and complexity assessment
- Ask if there are omissions or misunderstandings

### 2. Query Historical Experience
**Operation Content**:
- Check `docs/archives/README.md` to find related historical experience
- Check `docs/developer/todo.md` to understand current task status
- Reference `docs/developer/general-experience.md` to obtain general experience

**Output**: Identify reusable experience and pitfalls to avoid

### 3. workspace Initialization
**Operation Content**:
- Confirm workspace status is clean (only 3 template files)
- If not clean, clean up or archive first

**Check List**:
- [ ] `scratchpad.md` contains `[‰ªªÂä°ÂêçÁß∞]` placeholder
- [ ] `todo.md` contains `[‰ªªÂä°ÊèèËø∞]` placeholder
- [ ] `experience.md` contains `[ÁªèÈ™åÊèèËø∞]` placeholder

### 4. Set Up Task in scratchpad.md ‚ö†Ô∏è Must Feedback
**Operation Content**:
```markdown
### [Specific Feature Name] - [Start Date]
**Goal**: [Clear goal description]
**Status**: In Progress

#### Planned Steps
[ ] 1. [Specific step 1]
    - Expected Result: [Description]
    - Risk Assessment: [Risk points]
[ ] 2. [Specific step 2]
[ ] 3. [Specific step 3]
...
```

**‚ö†Ô∏è Feedback Requirements**:
```typescript
await mcp_feedback_enhanced({
  summary: "Task initialized: [Task Name]. Formulated [N] main steps: [Step overview]. Need to adjust plan?",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Show complete step list and expected results
- Explain dependencies between each step
- Point out potential risk points and mitigation measures
- Ask if priorities need adjustment

### 5. Set todo Priorities
**Operation Content**:
- Add urgent and important tasks in `todo.md`
- Sort by priority
- Set time expectations

### 6. Technical Solution Design ‚ö†Ô∏è Major Decisions Need Feedback
**Operation Content**:
- Design technical architecture
- Select technology stack
- Formulate implementation sequence

**‚ö†Ô∏è Feedback Trigger Conditions**:
- Involves major architecture adjustments
- Needs to introduce new dependencies
- May affect other functions
- Has multiple technology solution choices

**Feedback Format**:
```typescript
await mcp_feedback_enhanced({
  summary: "Technical solution design completed. Adopt [solution name], main considerations: [design reasons]. Alternative solutions include [other options]. Please confirm solution selection?",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Detail advantages and disadvantages of recommended solution
- List considered alternative solutions and their characteristics
- Explain decision basis for solution selection
- Mention key risk points of solution implementation

## ‚úÖ Completion Standards

### Output Check
- [ ] workspace contains specific task descriptions (non-template content)
- [ ] scratchpad.md has clear task objectives and step planning
- [ ] todo.md has specific tasks sorted by priority
- [ ] Technical solutions confirmed by user
- [ ] Completed at least 2 feedback confirmations

### Quality Verification
- [ ] Task objectives are clear and measurable
- [ ] Planned steps are specific and executable
- [ ] Risk identification is sufficient
- [ ] Time estimation is reasonable

## üîÑ Subsequent Processes

**After Successful Completion**: Proceed to [Workflow 2: Task Execution](./2-task-execution.md)

**When Adjustments Needed**:
- Major requirement changes ‚Üí Re-execute steps 1-4
- Technical solution adjustments ‚Üí Re-execute step 6
- Plan adjustments ‚Üí Update scratchpad.md and confirm via feedback

## üö® Exception Handling

### Unclear Requirements
- Immediately use mcp-feedback-enhanced to seek clarification
- Do not continue based on assumptions
- Record unclear points in scratchpad.md

### Technical Feasibility Questionable
- Conduct quick technical verification
- Record verification results
- Discuss alternative solutions with user

### Depends on Other Unfinished Tasks
- Clarify dependency relationships
- Adjust task priorities
- Split tasks if necessary

---

**Key Success Factors**: Sufficient communication + Clear planning + Timely feedback
