---
description: Task archiving and summary when task is completed
alwaysApply: false
---
# Workflow 3: Task Archiving

Organize work results, create archived documents, reset workspace environment.

## üéØ Process Goals

- Complete record of task results and experience
- Permanently save important content to archives
- Transfer unfinished tasks to appropriate locations
- Reset workspace to clean state

## üìã Prerequisites

### Trigger Conditions (Any one can be met)
- Task is basically completed, needs to organize results
- workspace content is excessive (>200 lines), needs cleanup
- Important experience discovered, needs permanent preservation
- Preparing to start new major tasks

### Input Requirements
- workspace contains meaningful task content (non-template state)
- Clearly know which content needs to be retained and which can be discarded

## üîÑ Execution Steps

### 1. Archiving Decision Assessment ‚ö†Ô∏è Must Feedback

**Assess 4 Key Questions**:
1. Is the function completed?
2. Is there important experience?
3. Is workspace too messy?
4. Are there unfinished tasks?

**‚ö†Ô∏è Feedback Requirements**:
```typescript
await mcp_feedback_enhanced({
  summary: "Archiving decision assessment: [Answers to 4 questions]. Recommend [archive/do not archive], reason: [specific reason].",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Answer the 4 assessment questions one by one with reasoning
- Explain current workspace content volume and importance
- Assess necessity and urgency of archiving
- Provide clear recommendations and reasons

### 2. Content Analysis and Classification

#### 2.1 Analyze workspace Content
**Operation Content**:
- Analyze completed tasks, in-progress tasks, important discoveries in scratchpad.md
- Analyze unfinished tasks in todo.md
- Analyze experience records in experience.md

#### 2.2 Content Classification
**Classification Standards**:
- **Core Results** - Main function implementation, architecture improvement
- **Important Experience** - Reusable technical experience, pitfall avoidance guides
- **Unfinished Tasks** - Need to transfer to developer/todo.md
- **General Experience** - Need to extract to developer/general-experience.md
- **Temporary Content** - Temporary records that can be discarded

### 3. Create Archived Documents ‚ö†Ô∏è Important Decisions Need Feedback

#### 3.1 Determine Archive Number and Name
**Operation Content**:
- Check docs/archives/README.md to determine next number
- Create a clear name for the function
- Create archive directory: `docs/archives/[number]-[function name]/`

**‚ö†Ô∏è Feedback Requirements** (if function is important):
```typescript
await mcp_feedback_enhanced({
  summary: "Preparing to create archive [number]-[function name], main content: [core results]. Archive structure: [document list].",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Explain archive numbering and naming logic
- Detail core results to be recorded
- Show planned document structure and content distribution
- Explain archiving value and future reference purposes

#### 3.2 Create Core Documents
**Required Documents**:

**README.md** - Project Overview
```markdown
# [Function Name]

## üìã Project Overview
- Project number, name, time, status

## üéØ Project Goals
- Main goals, technical goals

## ‚úÖ Completion Status
- Core function completion status
- Technical implementation completion status

## üéâ Main Results
- Architecture improvements, stability enhancements, development experience optimizations

## üöÄ Follow-up Work
- Identified to-do items, suggested improvement directions
```

**implementation.md** - Technical Implementation (if code changes exist)
```markdown
# Technical Implementation Details

## üîß Architecture Design
## üêõ Problem Diagnosis and Resolution
## üìù Implementation Steps
## üîç Debugging Process
## üß™ Testing Verification
```

**experience.md** - Experience Summary (if important experience exists)
```markdown
# Development Experience Summary

## üéØ Core Experience
## üõ†Ô∏è Technical Implementation Experience
## üö´ Pitfall Avoidance Guide
## üîÑ Architecture Design Experience
```

### 4. Update Project Index and Cross-references

#### 4.1 Update Archives Index
**Operation Content**:
- Add new entry in docs/archives/README.md
- Update next archive number
- Classify by status (completed/in-progress/planned)

#### 4.2 Task Transfer ‚ö†Ô∏è Important Tasks Need Confirmation
**Operation Content**:
- Transfer unfinished important tasks to docs/developer/todo.md
- Classify by priority (high/medium/low priority)
- Delete temporary tasks that have no value

**‚ö†Ô∏è Feedback Requirements** (if there are important unfinished tasks):
```typescript
await mcp_feedback_enhanced({
  summary: "Discovered unfinished important tasks: [task list]. Recommend transfer to [target location], set priority to [high/medium/low].",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Detail all unfinished tasks and their current status
- Explain importance and urgency assessment for each task
- Suggest specific transfer locations and priority assignments
- Assess task completion time and resource requirements

#### 4.3 Experience Extraction
**Operation Content**:
- Extract general experience to docs/developer/general-experience.md
- Add links pointing to new archives in general-experience.md
- Avoid experience duplication or dispersion

### 5. Workspace Reset ‚ö†Ô∏è Must Confirm

**‚ö†Ô∏è Confirmation Before Reset**:
```typescript
await mcp_feedback_enhanced({
  summary: "Archiving completed. Preparing to reset workspace, will delete all current content and restore template state. Please confirm can continue?",
  project_directory: "."
})
```

**Reset Operation**:
```batch
del docs\workspace\*.md
copy docs\workspace-template\*.md docs\workspace\
ren docs\workspace\scratchpad-template.md scratchpad.md
ren docs\workspace\todo-template.md todo.md
ren docs\workspace\experience-template.md experience.md
```

**Reset Verification**:
- [ ] workspace has only 3 files
- [ ] All files are in template format (contain placeholders)
- [ ] No specific task content

## ‚úÖ Completion Standards

### Archive Quality Check
- [ ] archives directory contains complete project documentation
- [ ] README.md clearly describes project overview and results
- [ ] Technical implementation and experience documents have substantial content
- [ ] archives/README.md index updated

### Task Transfer Check
- [ ] Important unfinished tasks transferred to appropriate locations
- [ ] General experience extracted to general-experience.md
- [ ] Cross-reference links are correct and valid

### Workspace Status Check
- [ ] workspace contains only 3 template files
- [ ] All content is in placeholder format
- [ ] No legacy specific task information

## üîÑ Subsequent Processes

**After Successful Completion**:
- workspace is clean, can start new tasks
- Use [Workflow 1: Task Initialization](./1-task-initialization.md) to start new work

**When Adjustments Needed**:
- Important content omissions discovered ‚Üí Supplement to archived documents
- Task transfer errors ‚Üí Reorganize task distribution
- workspace reset failure ‚Üí Manual check and repair

## üö® Exception Handling

### Archive Content Not Substantial Enough
**Processing Steps**:
1. Review original task objectives
2. Supplement missing implementation details
3. Add more context information
4. Ensure subsequent developers can understand

### Too Many Unfinished Tasks
**Processing Steps**:
1. Reassess task priorities
2. Consider task splitting or merging
3. Discuss with user which can be postponed
4. Avoid todo.md becoming too bloated

### Workspace Reset Failure
**Processing Steps**:
1. Manually check file permissions
2. Confirm template file integrity
3. Execute reset commands step by step
4. Verify final status

---

**Key Success Factors**: Complete records + Reasonable classification + Thorough cleanup

## üìä Archive Effectiveness Assessment

Good archiving should be able to:
- Allow developers 6 months later to quickly understand the project
- Avoid repeating the same mistakes
- Provide reusable experience and code patterns
- Provide reference architecture for similar projects
