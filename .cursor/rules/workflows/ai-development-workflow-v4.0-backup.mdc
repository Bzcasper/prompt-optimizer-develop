---
alwaysApply: false
---

# AI Development Workflow

Practical operation process for workspace usage and document management.

## üöÄ Start New Task

### 1. Query Background Information
- Check `docs/archives/README.md` to find related historical experience
- Check `docs/developer/todo.md` to understand current development task status
- Check `docs/developer/project-structure.md` to understand project structure
- Reference other docs documents as needed (mainly for reference, not mandatory)

### 2. Check workspace Status
- Confirm whether workspace is clean (should only have template files)
- If workspace is messy, execute cleanup process first
- Ensure workspace uses standard template structure

### 3. Set Up New Task (in workspace)
- Replace template content in `scratchpad.md`:
  ```markdown
  ### [New Feature Name] - [Start Date]
  **Goal**: [Specific goal description]
  **Status**: In Progress

  #### Planned Steps
  [ ] 1. Requirements Analysis
  [ ] 2. Technical Solution Design
  [ ] 3. Feature Implementation
  [ ] 4. Testing Verification
  [ ] 5. Documentation Update
  ```
- Add urgent and important tasks in `todo.md`

## üîÑ Iterative Development

### Development Loop (Repeat Execution)
1. **Record Progress** - Update progress records in `scratchpad.md`
2. **Implement Features** - Write code, run tests
3. **Record Discoveries** - Write important experience to `experience.md`
4. **Update Status** - Mark completed steps `[x]`
5. **Manage Tasks** - Update task status in `todo.md`

### Reference Documents (View as Needed)
- Check `docs/developer/general-experience.md` to obtain general experience
- Check technical documents under `docs/developer/`
- Check relevant `docs/archives/` directories for specialized experience

## ‚úÖ Complete Task

### 1. Summarize Work
Add in scratchpad.md:
```markdown
### Completion Summary
- What features were implemented
- What problems were encountered
- How they were solved
```

### 2. Archiving Decision (Simple Judgment)
**Ask yourself 4 questions**:
- Is the function completed? ‚Üí Yes ‚Üí Archive
- Is there important experience? ‚Üí Yes ‚Üí Archive
- Is workspace too messy? ‚Üí Yes ‚Üí Organize
- Are there unfinished tasks? ‚Üí Yes ‚Üí Transfer to developer/todo.md

## üìÅ Archiving Operations

### Quick Archiving Process
1. **Create Directory** - `docs/archives/[next number]-[feature name]/`
2. **Extract Content** - Extract relevant content from workspace files
3. **Create Documents** - README.md (overview) + specific implementation documents
4. **Update Index** - Add entry in archives/README.md
5. **Transfer Tasks** - Transfer unfinished tasks to developer/todo.md
6. **Transfer Experience** - Transfer general experience to developer/general-experience.md
7. **Reset workspace** - Completely reset using template

### workspace Deep Cleanup Process
1. **Analyze Content** - Identify completed tasks, unfinished tasks, general experience, specialized experience
2. **Archive by Function** - Archive related content to corresponding archives directories
3. **Task Transfer** - Organize unfinished tasks by functional modules and priorities into developer/todo.md
4. **Experience Extraction** - Extract general experience to developer/general-experience.md
5. **Template Reset** - Delete all workspace files, copy template files from workspace-template

## üìö Daily Maintenance

### Query History
- First look at `docs/archives/README.md` to find feature points
- Then look at specific directory README.md to understand overview
- Finally look at implementation.md and experience.md for details

### Keep Clean
- Check workspace status weekly, clean up expired content promptly
- Archive immediately after completing important tasks
- Regularly transfer unfinished tasks to developer/todo.md
- Use template reset to keep workspace clean

## üßπ Workspace Organization Best Practices

### Organization Trigger Conditions
- workspace files exceed 200 lines
- Contain more than 3 completed tasks
- Mix content from multiple different functions
- Preparing to start new important tasks

### Organization Step Template
1. **Content Analysis** - Identify completed, in-progress, planned content
2. **Function Classification** - Group content by feature points
3. **Create Archives** - Create archives directories for completed features
4. **Task Transfer** - Organize unfinished tasks by priority into developer/todo.md
5. **Experience Extraction** - Organize general experience into developer/general-experience.md
6. **Template Reset** - Completely reset workspace using standard template

### Organization Quality Check
- ‚úÖ workspace contains only 3 template files
- ‚úÖ All historical tasks correctly archived
- ‚úÖ Unfinished tasks transferred to developer/todo.md
- ‚úÖ archives/README.md index updated
- ‚úÖ Cross-reference links correct

## üîÑ Workflow Self-Improvement

### Improvement Principles
- **Keep Simple** - Avoid excessive expansion, control within 200 lines
- **Practice-Based** - Adjust processes based on actual execution experience
- **Regular Assessment** - Assess workflow effectiveness once after each feature process ends

### Improvement Triggers
Consider updating this workflow when the following situations occur:
- Discover unreasonable or missing process steps
- workspace usage patterns change
- Archiving decision standards need adjustment
- New best practices emerge

### Improvement Records
Record workflow improvement ideas in `docs/developer/general-experience.md`, integrate into this document regularly.

## üõ†Ô∏è Practical Tool Commands

### workspace Template Reset
```bash
# Windows
del docs\workspace\*.md
copy docs\workspace-template\*.md docs\workspace\
ren docs\workspace\scratchpad-template.md scratchpad.md
ren docs\workspace\todo-template.md todo.md
ren docs\workspace\experience-template.md experience.md
```

### Quick Check workspace Status
- File count should be 3 (scratchpad.md, todo.md, experience.md)
- Content should be template format, containing placeholders like `[‰ªªÂä°ÂêçÁß∞]`, `[Êó•Êúü]`, etc.
- If it contains specific task content, it means cleanup is needed

---

**Self-Iterative Version**: v4.0
**Update Time**: 2025-07-01
**Features**: Optimized based on actual organization experience, added deep cleanup process and practical tools
# AI Development Workflow

Practical operation process for workspace usage and document management.

## üöÄ Start New Task

### 1. Query Background Information
- Check `docs/archives/README.md` to find related historical experience
- Check `docs/developer/todo.md` to understand current development task status
- Check `docs/developer/project-structure.md` to understand project structure
- Reference other docs documents as needed (mainly for reference, not mandatory)

### 2. Check workspace Status
- Confirm whether workspace is clean (should only have template files)
- If workspace is messy, execute cleanup process first
- Ensure workspace uses standard template structure

### 3. Set Up New Task (in workspace)
- Replace template content in `scratchpad.md`:
  ```markdown
  ### [New Feature Name] - [Start Date]
  **Goal**: [Specific goal description]
  **Status**: In Progress

  #### Planned Steps
  [ ] 1. Requirements Analysis
  [ ] 2. Technical Solution Design
  [ ] 3. Feature Implementation
  [ ] 4. Testing Verification
  [ ] 5. Documentation Update
  ```
- Add urgent and important tasks in `todo.md`

## üîÑ Iterative Development

### Development Loop (Repeat Execution)
1. **Record Progress** - Update progress records in `scratchpad.md`
2. **Implement Features** - Write code, run tests
3. **Record Discoveries** - Write important experience to `experience.md`
4. **Update Status** - Mark completed steps `[x]`
5. **Manage Tasks** - Update task status in `todo.md`

### Reference Documents (View as Needed)
- Check `docs/developer/general-experience.md` to obtain general experience
- Check technical documents under `docs/developer/`
- Check relevant `docs/archives/` directories for specialized experience

## ‚úÖ Complete Task

### 1. Summarize Work
Add in scratchpad.md:
```markdown
### Completion Summary
- What features were implemented
- What problems were encountered
- How they were solved
```

### 2. Archiving Decision (Simple Judgment)
**Ask yourself 4 questions**:
- Is the function completed? ‚Üí Yes ‚Üí Archive
- Is there important experience? ‚Üí Yes ‚Üí Archive
- Is workspace too messy? ‚Üí Yes ‚Üí Organize
- Are there unfinished tasks? ‚Üí Yes ‚Üí Transfer to developer/todo.md

## üìÅ Archiving Operations

### Quick Archiving Process
1. **Create Directory** - `docs/archives/[next number]-[feature name]/`
2. **Extract Content** - Extract relevant content from workspace files
3. **Create Documents** - README.md (overview) + specific implementation documents
4. **Update Index** - Add entry in archives/README.md
5. **Transfer Tasks** - Transfer unfinished tasks to developer/todo.md
6. **Transfer Experience** - Transfer general experience to developer/general-experience.md
7. **Reset workspace** - Completely reset using template

### workspace Deep Cleanup Process
1. **Analyze Content** - Identify completed tasks, unfinished tasks, general experience, specialized experience
2. **Archive by Function** - Archive related content to corresponding archives directories
3. **Task Transfer** - Organize unfinished tasks by functional modules and priorities into developer/todo.md
4. **Experience Extraction** - Extract general experience to developer/general-experience.md
5. **Template Reset** - Delete all workspace files, copy template files from workspace-template

## üìö Daily Maintenance

### Query History
- First look at `docs/archives/README.md` to find feature points
- Then look at specific directory README.md to understand overview
- Finally look at implementation.md and experience.md for details

### Keep Clean
- Check workspace status weekly, clean up expired content promptly
- Archive immediately after completing important tasks
- Regularly transfer unfinished tasks to developer/todo.md
- Use template reset to keep workspace clean

## üßπ Workspace Organization Best Practices

### Organization Trigger Conditions
- workspace files exceed 200 lines
- Contain more than 3 completed tasks
- Mix content from multiple different functions
- Preparing to start new important tasks

### Organization Step Template
1. **Content Analysis** - Identify completed, in-progress, planned content
2. **Function Classification** - Group content by feature points
3. **Create Archives** - Create archives directories for completed features
4. **Task Transfer** - Organize unfinished tasks by priority into developer/todo.md
5. **Experience Extraction** - Organize general experience into developer/general-experience.md
6. **Template Reset** - Completely reset workspace using standard template

### Organization Quality Check
- ‚úÖ workspace contains only 3 template files
- ‚úÖ All historical tasks correctly archived
- ‚úÖ Unfinished tasks transferred to developer/todo.md
- ‚úÖ archives/README.md index updated
- ‚úÖ Cross-reference links correct

## üîÑ Workflow Self-Improvement

### Improvement Principles
- **Keep Simple** - Avoid excessive expansion, control within 200 lines
- **Practice-Based** - Adjust processes based on actual execution experience
- **Regular Assessment** - Assess workflow effectiveness once after each feature process ends

### Improvement Triggers
Consider updating this workflow when the following situations occur:
- Discover unreasonable or missing process steps
- workspace usage patterns change
- Archiving decision standards need adjustment
- New best practices emerge

### Improvement Records
Record workflow improvement ideas in `docs/developer/general-experience.md`, integrate into this document regularly.

## üõ†Ô∏è Practical Tool Commands

### workspace Template Reset
```bash
# Windows
del docs\workspace\*.md
copy docs\workspace-template\*.md docs\workspace\
ren docs\workspace\scratchpad-template.md scratchpad.md
ren docs\workspace\todo-template.md todo.md
ren docs\workspace\experience-template.md experience.md
```

### Quick Check workspace Status
- File count should be 3 (scratchpad.md, todo.md, experience.md)
- Content should be template format, containing placeholders like `[‰ªªÂä°ÂêçÁß∞]`, `[Êó•Êúü]`, etc.
- If it contains specific task content, it means cleanup is needed

---

**Self-Iterative Version**: v4.0
**Update Time**: 2025-07-01
**Features**: Optimized based on actual organization experience, added deep cleanup process and practical tools
