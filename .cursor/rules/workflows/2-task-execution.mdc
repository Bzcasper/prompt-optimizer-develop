---
description: Progress updates during task execution process
alwaysApply: false
---
# Workflow 2: Task Execution

Iterative development, update progress, record discoveries and issues.

## üéØ Process Goals

- Execute development tasks according to plan
- Update task progress timely
- Record important discoveries and experience
- Maintain effective communication with users

## üìã Prerequisites

### Input Requirements
- Task has been set up through [Workflow 1: Task Initialization](./1-task-initialization.md)
- workspace contains specific task descriptions and plans
- Technical solutions have been determined

### Environment Check
- scratchpad.md contains specific tasks (non-template content)
- Has clear planned step list
- Development environment is ready

## üîÑ Execution Steps

### 1. Step Execution Loop

#### 1.1 Start New Step ‚ö†Ô∏è Must Feedback
**Operation Content**:
- Select the next step to execute
- Confirm prerequisites are met
- Assess current step complexity

**‚ö†Ô∏è Feedback Requirements**:
```typescript
await mcp_feedback_enhanced({
  summary: "Preparing to execute step [N]: [step description]. Expected to take [time], main work includes [work content]. Start execution?",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Clearly explain current step's specific objectives
- List main work items that need completion
- Explain expected output and acceptance criteria
- Mention potential technical difficulties

#### 1.2 Implement Development Work
**Operation Content**:
- Write code
- Run tests
- Verify functionality
- Fix issues

**Real-time Recording**: Update progress records in scratchpad.md
```markdown
#### Progress Records
- [Time] Start executing step [N]: [Step Name]
- [Time] Complete [specific work], encountered [problem description]
- [Time] Solution: [solution method]
```

#### 1.3 Step Completion Confirmation ‚ö†Ô∏è Important Milestones Need Feedback
**Operation Content**:
- Mark step completion: `[x] 1. [Completed Step]`
- Record actual results and discoveries
- Assess impact on subsequent steps

**‚ö†Ô∏è Feedback Trigger Conditions**:
- Complete important milestones
- Discover major technical issues
- Need to adjust subsequent plans
- Exceed expected time by more than 50%

**Feedback Format**:
```typescript
await mcp_feedback_enhanced({
  summary: "Step [N] completed: [results description]. Discovered [important findings]. Subsequent plans [need adjustment].",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Describe in detail the functions and effects actually completed
- Explain differences from expected objectives (if any)
- Summarize important technical discoveries or experience
- Assess impact on subsequent steps and adjustment suggestions

### 2. Problem Handling Process

#### 2.1 Encounter Technical Problems ‚ö†Ô∏è Must Feedback
**Operation Content**:
- Analyze problem causes in detail
- Research possible solutions
- Assess solution impacts

**‚ö†Ô∏è Feedback Requirements**:
```typescript
await mcp_feedback_enhanced({
  summary: "Encountered technical problem: [problem description]. Possible causes: [analysis]. Suggested solutions: [solution 1/solution 2]. Please choose handling method?",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Clearly describe problem's specific manifestations and impact scope
- Provide detailed root cause analysis
- Give 2-3 feasible solutions, including pros and cons
- Explain time costs and risk assessments for each solution

#### 2.2 Record Problems and Solutions
**Operation Content**:
Record in scratchpad.md:
```markdown
## Problem Records

### [Problem Title] - [Discovery Date]
**Problem Description**: [Detailed description]
**Cause Analysis**: [Root cause]
**Solution**: [Adopted solution method]
**Experience Summary**: [Pitfall avoidance points]
```

### 3. Experience Recording

#### 3.1 Important Discovery Recording
**Operation Content**:
Record in real-time in scratchpad.md:
```markdown
#### Important Discoveries
- [Time] [Technical discovery or best practice]
- [Time] [Details or pitfalls to note]
- [Time] [Reusable code patterns or tools]
```

#### 3.2 General Experience Extraction
**Operation Content**:
- Identify reusable experience
- Record in classifications in experience.md
- Avoid reinventing the wheel

### 4. Progress Management

#### 4.1 Regular Progress Checks
**Check Frequency**:
- Simple tasks: Every 1-2 steps completed
- Complex tasks: Every 2-4 hours
- Encounter blocking: Immediate check

**Check Content**:
- Current progress vs planned progress
- Problems and blocking encountered
- Whether subsequent plans need adjustment

#### 4.2 Plan Adjustments ‚ö†Ô∏è Must Feedback
**Trigger Conditions**:
- Discover new technical problems
- Requirements change
- Time estimates deviate significantly
- Discover better solutions

**‚ö†Ô∏è Feedback Requirements**:
```typescript
await mcp_feedback_enhanced({
  summary: "Plan needs adjustment. Reason: [adjustment reason]. Suggest changing [original plan] to [new plan]. Expected impact: [time/scope changes].",
  project_directory: "."
})
```

**Feedback Content Refinement**:
- Explain in detail the specific reasons needing adjustment
- Compare differences between original plan and new plan
- Quantitatively assess changes in time, resources, scope
- Explain risks and benefits after adjustment

## ‚úÖ Phase Completion Standards

### Individual Step Completion
- [ ] Functions implemented as expected
- [ ] Tests pass verification
- [ ] Code quality meets standards
- [ ] Problems and discoveries recorded
- [ ] Step status updated

### Important Milestone Completion
- [ ] User has confirmed phase results
- [ ] Important experience recorded
- [ ] Subsequent plans confirmed
- [ ] Necessary documents updated

## üîÑ Process Conversion

### Continue Execution
- Unfinished steps remain ‚Üí Continue execution loop
- Encounter blocking problems ‚Üí Enter problem handling process
- Need plan adjustment ‚Üí Update plan and obtain confirmation

### Switch to Archiving
- All main steps completed ‚Üí [Workflow 3: Task Archiving](./3-task-archiving.md)
- Task paused/cancelled ‚Üí Organize existing results then archive
- workspace content excessive ‚Üí Phased archiving, reinitialize

## üö® Exception Handling

### Long Time No Progress
**Processing Steps**:
1. Analyze blocking causes
2. Seek external help or change methods
3. Consider reducing task scope
4. Discuss alternative solutions with user

### Frequent Requirement Changes
**Processing Steps**:
1. Pause current work
2. Re-analyze requirements
3. Assess value of completed work
4. Decide whether reinitialization needed

### Technical Solution Proves Infeasible
**Processing Steps**:
1. Immediately stop current implementation
2. Analyze failure causes in detail
3. Research alternative technical solutions
4. Discuss subsequent plans with user

---

**Key Success Factors**: Continuous communication + Timely adjustment + Detailed recording
