version: '3.8'

services:
  prompt-optimizer:
    # 开发模式：从源码构建
    build:
       context: .
       dockerfile: Dockerfile
    container_name: prompt-optimizer-dev
    restart: unless-stopped
    ports:
      - "8082:${NGINX_PORT:-80}"      # Web应用端口
    extra_hosts:
      - "host.docker.internal:host-gateway"  # 允许容器访问宿主机
    env_file:
      - .env.local     # 读取本地环境变量文件
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:${NGINX_PORT:-80}/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      # nginx内部端口配置
      - NGINX_PORT=${NGINX_PORT:-80}
      # Web应用API配置（使用实际的API密钥）
      - VITE_OPENAI_API_KEY=${VITE_OPENAI_API_KEY}
      - VITE_GEMINI_API_KEY=${VITE_GEMINI_API_KEY}
      - VITE_ZHIPU_API_KEY=${VITE_ZHIPU_API_KEY}
      # Content generation configuration
      - ENABLE_CONTENT_GENERATION=${ENABLE_CONTENT_GENERATION:-true}
      - CONTENT_GENERATION_TIMEOUT=${CONTENT_GENERATION_TIMEOUT:-120000}
      - MAX_CONTENT_ITERATIONS=${MAX_CONTENT_ITERATIONS:-10}
      - CONTENT_TEMPLATE_CACHE_SIZE=${CONTENT_TEMPLATE_CACHE_SIZE:-50}

      # Multi-agent orchestrator configuration
      - ENABLE_MULTI_AGENT=${ENABLE_MULTI_AGENT:-true}
      - MAX_CONCURRENT_AGENTS=${MAX_CONCURRENT_AGENTS:-5}
      - AGENT_TIMEOUT=${AGENT_TIMEOUT:-300000}
      - AGENT_MEMORY_SIZE=${AGENT_MEMORY_SIZE:-20000}

      # Tool registry configuration
      - ENABLE_ADVANCED_TOOLS=${ENABLE_ADVANCED_TOOLS:-true}
      - TOOL_TIMEOUT=${TOOL_TIMEOUT:-60000}
      - MAX_TOOL_CONCURRENCY=${MAX_TOOL_CONCURRENCY:-10}

      # Video processing configuration
      - ENABLE_VIDEO_PROCESSING=${ENABLE_VIDEO_PROCESSING:-true}
      - VIDEO_PROCESSING_TIMEOUT=${VIDEO_PROCESSING_TIMEOUT:-120000}

      # Speech recognition configuration
      - ENABLE_SPEECH_RECOGNITION=${ENABLE_SPEECH_RECOGNITION:-true}
      - SPEECH_RECOGNITION_MODEL=${SPEECH_RECOGNITION_MODEL:-whisper-large}

      # Machine learning configuration
      - ENABLE_ML_MODEL_TRAINING=${ENABLE_ML_MODEL_TRAINING:-true}
      - ML_TRAINING_TIMEOUT=${ML_TRAINING_TIMEOUT:-3600000}

      # Data visualization configuration
      - ENABLE_DATA_VISUALIZATION=${ENABLE_DATA_VISUALIZATION:-true}

      # UX/UI design configuration
      - ENABLE_UX_UI_DESIGN=${ENABLE_UX_UI_DESIGN:-true}

      # Project management configuration
      - ENABLE_PROJECT_MANAGEMENT=${ENABLE_PROJECT_MANAGEMENT:-true}

      # Basic认证配置（可选）
      - ACCESS_USERNAME=${ACCESS_USERNAME:-admin}
      - ACCESS_PASSWORD=${ACCESS_PASSWORD:-}
    volumes:
      - ./data/prompts:/app/data/prompts
      - ./data/models:/app/data/models
      - ./data/visualizations:/app/data/visualizations
      - ./logs:/app/logs
    depends_on:
      - mcp-server

  mcp-server:
    # 开发模式：从源码构建
    build:
       context: .
       dockerfile: Dockerfile
    container_name: prompt-optimizer-mcp-dev
    restart: unless-stopped
    ports:
      - "3001:3000"  # MCP server HTTP port (different port for dev)
    command: ["node", "-r", "./preload-env.js", "dist/start.js", "--transport=http", "--port=3000"]
    extra_hosts:
      - "host.docker.internal:host-gateway"  # 允许容器访问宿主机
    env_file:
      - .env.local     # 读取本地环境变量文件
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      # MCP server configuration
      - MCP_HTTP_PORT=3000
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-debug}
      - MCP_DEFAULT_LANGUAGE=${MCP_DEFAULT_LANGUAGE:-zh}
      - MCP_DEFAULT_MODEL_PROVIDER=${MCP_DEFAULT_MODEL_PROVIDER:-openai}

      # MCP model configuration (separate from web app models) - using actual keys
      - MCP_OPENAI_API_KEY=${MCP_OPENAI_API_KEY}
      - MCP_GEMINI_API_KEY=${MCP_GEMINI_API_KEY}
      - MCP_ZHIPU_API_KEY=${MCP_ZHIPU_API_KEY}

      # Core services configuration
      - ENABLE_CONTENT_GENERATION=${ENABLE_CONTENT_GENERATION:-true}
      - ENABLE_MULTI_AGENT=${ENABLE_MULTI_AGENT:-true}
      - ENABLE_ADVANCED_TOOLS=${ENABLE_ADVANCED_TOOLS:-true}
    volumes:
      - ./data/prompts:/app/data/prompts:ro
      - ./data/models:/app/data/models:ro
      - ./logs/mcp:/app/logs
    working_dir: /app/mcp-server

